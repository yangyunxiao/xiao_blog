---
layout:     post
title:      "Gradle 笔记"
subtitle:   "Gradld 笔记"
date:       2020-03-01
author:     "xiao"
header-img: "img/android_header.jpg"
tags:
    - Android
    - Gradle


---



#### Gradle 学习笔记

Gradle 中两个重要的概念

* Project ： 项目中每个build.gradle 都会被编译成一个 project 
* Task

----

##### Project

* getAllProjects   ： 获取当前工程中所有的project 包含父project
* getSubProjects  :  获取当前工程中所有的子project
* getParent ： 获取当前 Project 的父 project
* getRootProject ： 获取 根project 




```groovy
// 获取项目中所有的project
this.getAllProjects().eachWithIndex { Project project , int index ->
	if(index == 0 ){
		// 根 project
		println "root project : '${project.name}'"
	}else{
		// 子 project
		println "child project : '${project.name}'"
	}
}
```

###### 在 rootproject 下配置 子project

* project( String name , Closure confiturationClosure )  查询指定的 project 进行配置
* allProjects(Closure configurationClosure)   对 当前节点工程 及 子projests 进行配置
* subprojects(Closure configurationClosure)  对子工程进行配置

```groovy
// 查询 project 并通过闭包进行设置
project('app'){Project project ->
	// 对 android 子project 进行配置 
  apply plugin : 'com.android.application'
  group 'com.imooc'
  version '1.0.0-release'
  dependencies {
    
  }
	println project.name
}

// 对所有的子工程进行配置
subprojects{Project project ->
  // 过滤 apk 工程 ，仅对 库工程使用
  if (project.plugins.hasPlugin('com.android.library')){
    apply from : '../publishToMaven.gradle' 
  }
}
```

###### 属性相关 api

* DEFAULT_BUILD_FILE = "build.gradle"   默认的build 文件名
* PATH_SEPARATOR = ":"  默认的路径分隔符  
* DEFAULT_BUILD_DIR_NAME  默认的 build 文件夹
* GRADLE_PROPERTIES  


```groovy
  
  /**
   * 默认的build 文件名
   */
  String DEFAULT_BUILD_FILE = "build.gradle";
  
  /**
   * 默认的路径分隔符  
   */
  String PATH_SEPARATOR = ":";
  
  /**
   * 默认的 build 文件夹
   */
  String DEFAULT_BUILD_DIR_NAME = "build";
  
  String GRADLE_PROPERTIES = "gradle.properties";
  
  String SYSTEM_PROP_PREFIX = "systemProp";
  
  String DEFAULT_VERSION = "unspecified";
  
  String DEFAULT_STATUS = "release";
```

除了上面的几个属性之外，gradle 还提供了 **扩展属性**

```groovy
// 为 project 定义扩展属性  可在 project 中直接使用
ext {
	compileSdkVersion = 25
  xxxVersion = "1.0.0"
}

dependencies{
  compile "com.xxx.xx:${xxxVersion}"
}

// 为 所有的子工程 定义扩展属性
subprojects {
  ext { 
  	compileSdkVersion = 25
    libAndroidDesign = 'com.android.support:design:25.0.0'
  }
}

// app -> build.gradle
android {
  compileSdkVersion = compileSdkVersion
}

// -----------------------改进 0.1 ------------------->
// 将共有的扩展属性定义在 rootProject 中 ，子工程中引用即可
android {
  // rootProject  可省略，因为 根 Project 下的属性 可以被 子Project 继承 使用
  compileSdkVersion = this.rootProject.compileSdkVersion
  compileSdkVersion = this.compileSdkVersion
}
// -----------------------改进 1.0 ------------------->
// 将配置文件单独抽出，common.gradle
ext{
  android = [
    compileSdkVersion : 25,
    buildToolVersion : "25.0.0"
  ]
  signCofigs = [
    'storeFile' : "youdo.jks"
  ]
}
// 根工程中使用 
apply from : this.file('./common.gradle')
android.compileSdkVersion
// 在子工程中使用
rootProject.ext.android.compileSdkVersion


```

扩展属性的其他定义方式 ，在gradle.properties 中直接定义 **缺点是只能定义字符串键值对**

注意：gradle.properties 中定义的属性不能与子工程中的属性重复，否则在运行中会出现子工程找不到相关属性的错误

```groovy 
// 直接在 gradle.properties 文件中定义键值对 即可在全局范围内引用
// 缺点是只能定义键值对
isLoadTest=false

//其他位置使用
if (hasProperty('isLoadTest')? isLoadTest.toBoolean()){
  include ':Test' // 定义是否引入 Test 工程
}

```